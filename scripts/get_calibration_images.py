#!/usr/bin/env python3

import os
import sys
import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt
### Set parameters to find the HSI mosaic binaries
os.environ['PATH'] += os.pathsep + r'/opt/imec/hsi-mosaic/bin'
# Also add them to the path
sys.path.append('/opt/imec/hsi-mosaic/python_apis')
# Import IMEC specific libraries
import hsi_common as HSI_COMMON
import hsi_camera as HSI_CAMERA

class CalibrationImages():
    def __init__(self):
        self.dev_lists = [HSI_CAMERA.EnumerateConnectedDevices(manufacturer=HSI_CAMERA.Manufacturer.EM_XIMEA),
                          HSI_CAMERA.EnumerateConnectedDevices(manufacturer=HSI_CAMERA.Manufacturer.EM_IMEC)]

        self.devices = [HSI_CAMERA.OpenDevice(dev_list[0]) for dev_list in self.dev_lists]
        [HSI_CAMERA.Initialize(device) for device in self.devices]  
        self.c_params =  [HSI_CAMERA.GetConfigurationParameters(device) for device in self.devices]
        self.r_params = [HSI_CAMERA.GetRuntimeParameters(device) for device in self.devices]
        self.r_params[1]['exposure_time_ms'] = 60
        self.data_formats = [HSI_CAMERA.GetOutputFrameDataFormat(device) for device in self.devices]
        self.frames = [HSI_COMMON.AllocateFrame(dataformat) for dataformat in self.data_formats]
        [HSI_CAMERA.Start(device) for device in self.devices]

    def grab_images(self):
        [HSI_CAMERA.Trigger(device) for device in self.devices]
        [HSI_CAMERA.AcquireFrame(device, frame=frame) for device, frame in zip(self.devices, self.frames)]
        images = [HSI_COMMON.FrameAsArray(frame) for frame in self.frames]
        patterns = [5, 3]
        heights = [image.shape[0] for image in images]
        widths = [image.shape[1] for image in images]
        big_cubes = [self.im2cube_sinc(image, pattern, height, width) for (image, pattern, height, width) in zip(images, patterns, heights, widths)]
        small_cubes = (self.minimize_cube(big_cube, height, width, pattern) for (big_cube, height, width, pattern) in zip(big_cubes, heights, widths, patterns))

        model_names = ["ximea", "imec"]
        cleaned = [self.clean_cube(small_cube, model_name) for (small_cube, model_name) in zip(small_cubes, model_names)]
        cleaned = [np.array(x) for x in cleaned]

        resized_imec = cv.resize(cleaned[1], (426, 340))
        cleaned[1] = resized_imec[62:-61,9:-8,:]

        images = [x[:,:,0] for x in cleaned]

        return images

    def im2cube_sinc(self, im_raw, pattern, height, width):
        """
        Interpolated demosaicking (Lanczos windowed sinc)
        :param im_raw: raw input image
        :param pattern: integer dimension of the mosaic pattern (e.g. 4 or 5)
        :param height: height of valid image region
        :param width: width of valid image region
        :return:
        """
        cube = np.zeros([height, width, pattern ** 2])

        band = 0
        for i in range(0, pattern):
            for j in range(0, pattern):
                im_sub = im_raw[i:(height + 1):pattern, j:(width + 1):pattern]
                im_sub = cv.resize(im_sub, (width, height), interpolation = cv.INTER_LANCZOS4)

                offset = [i / pattern, j / pattern]
                im_sub = self.filter_shift(im_sub, offset)

                cube[:, :, band] = im_sub[:height, :width]
                band += 1

        im_guide = cube[:, :, 0]

        return cube
    
    def filter_shift(sefl,im,offset):
        """
        Shift image with offset
        :param im: input image
        :param offset: translation shift
        :return: shifted image
        """

        rows, cols = im.shape
        M = np.float32([[1, 0, offset[1]], [0, 1, offset[0]]])
        z = cv.warpAffine(im, M, (cols, rows), cv.INTER_LANCZOS4)

        return z
    
    #reduces size of cube
    def minimize_cube(self, big_cube: np.ndarray, height: int, width: int, pattern: int) -> np.ndarray:
        #creates shell for reduced cube
        cube_sinc_out = np.zeros((height//pattern, width//pattern, pattern**2))
        
        #resizing of cube data
        for channel_num in range(big_cube.shape[2]):
            cube_sinc_out[:,:,channel_num] = cv.resize(big_cube[:,:,channel_num], (big_cube.shape[1]//pattern, big_cube.shape[0]//pattern), interpolation = cv.INTER_LANCZOS4)
        return cube_sinc_out

    def clean_cube(self, cube, model_name):
        if model_name == 'ximea':
            values = [["-0.0870111 -0.0797373 -0.0516343 0.0228433 -0.0434904 0.00188421 -0.0180086 -0.00180196 -0.0035571 0.00762132 -0.00192729 -0.0269716 -0.00267334 -0.00188096 -0.00355713 -0.0463655 -0.142786 -0.0296149 -0.00297669 0.00437106 0 1.62659 -0.113809 0.00685329 -0.0123591"],
            ["-0.00640826 -0.0231203 -0.0828399 -0.0284085 -0.0164755 0.00130988 -0.000259826 -0.00621806 -0.00446879 0.000878751 -0.00149024 -0.00233908 -0.0190474 -0.000765457 -0.00230613 0.00894476 -0.025628 -0.0953716 -0.0214167 0.00234876 0 -0.0831558 1.42672 -0.00146256 -0.0190242"],
            ["-0.00171508 -0.00194242 -0.0276622 -0.0796324 -0.0499271 -0.000936207 0.000384042 0.00209444 -0.00864609 -0.00118338 -0.00297327 -0.00343256 -0.00107147 -0.0172835 -0.00184215 0.0124785 -0.00110149 -0.0217123 -0.0907514 -0.0165816 0 0.0013707 -0.143579 1.62258 -0.166931"],
            ["-0.023137 0.00712731 -0.00709689 -0.00342218 -0.0828304 -0.00224962 0.000512481 0.000780517 -0.00215545 0.000189601 -0.00515615 -0.00159582 -0.000508293 8.84575e-05 -0.0104717 0.0598981 -0.00286399 0.00440791 -0.00985091 -0.0687412 0 -0.018463 0.00119182 -0.0403227 1.20467"],
            ["-0.0246332 0.011417 -0.00718253 0.0141335 -0.0228154 -0.0141469 0.000625065 -0.00148689 -0.00166011 0.00673268 -0.080954 -0.0141323 0.0029408 0.00108139 -0.0175558 1.55535 -0.125264 -0.00117102 0.00557531 -0.15538 0 -0.0382738 -0.0107665 -0.00189718 -0.0805378"],
            ["-0.0048326 0.00167166 -0.00424578 0.00128372 -0.00831566 0.0017465 -0.0104019 -0.000545719 -0.00080037 0.00112145 -0.0103592 -0.0454317 -0.0114294 -0.00158217 4.68961e-05 -0.0326611 1.17108 0.000823045 0.0251436 0.00238478 0 -0.050949 -0.0154776 -0.00421686 -0.00405719"],
            ["0.00187216 -0.00449102 -0.00247466 -0.000733806 -0.00958267 0.00134316 -0.000192064 -0.0148557 -0.00194595 -0.000528778 0.00671163 -0.01055 -0.0699338 -0.0216831 -0.00131658 0.00818176 -0.235705 1.48223 0.0026433 -0.00547208 0 -0.00963981 -0.0818562 -0.0262711 -0.00575377"],
            ["-0.00100823 0.000951497 -0.00742305 0.00430391 -0.0169003 -0.000714799 -0.00214692 0.000737697 -0.0191155 -0.000321806 6.11438e-06 0.0103718 -0.0182083 -0.105947 -0.0218467 -0.0130911 -0.0181792 -0.249609 1.75129 -0.117884 0 -5.04896e-05 -0.0173426 -0.127917 -0.0299564"],
            ["-0.00330288 0.00045908 -0.0021249 0.0013832 -0.0123621 -0.00347899 -0.00288282 -0.00175146 -0.00029748 -0.00998484 0.064182 0.0303663 0.00614099 -0.0114625 -0.0652094 -0.0892624 -0.022957 -0.00513536 -0.112767 1.35339 0 -0.00357073 7.482e-05 -0.0130556 -0.0963865"],
            ["-0.0138605 -3.95324e-05 -1.83055e-05 -0.000184699 -0.00715478 -0.0769391 -0.0192705 0.000131156 -0.00066591 -0.0161994 1.49611 -0.01292 0.00157088 0.00142284 -0.136356 -0.145994 -0.0384956 -0.00749459 0.00250951 -0.000470912 0 -0.00617487 -0.00631934 -0.00498193 -0.00820462"],
            ["-0.00434581 -0.0147235 -0.00157749 -0.00329774 -0.0102354 -0.020251 -0.11963 -0.0309873 -0.00101214 0.00642147 -0.298128 1.92097 -0.0968823 -0.0295264 0.0223773 -0.03924 -0.192544 -0.0440124 -0.0143016 2.35312e-05 0 -0.0100958 -0.00642998 -0.00360847 -0.00896218"],
            ["0.000558221 -0.000709979 -0.012902 -0.00129739 -0.0115787 0.0135928 -0.016957 -0.107482 -0.0244485 -0.000680809 -0.0117658 -0.0958125 1.56837 -0.0901654 0.0293869 -0.00640111 -0.035711 -0.133272 -0.0402132 -0.00435773 0 -0.00414898 -0.00854053 -0.00190988 -0.00355007"],
            ["0.000196278 0.000315074 -0.00123494 -0.00948433 -0.0150567 0.0223848 0.0127739 -0.0304329 -0.0864583 -0.0249312 -0.0225908 -0.00522887 -0.0647792 1.36753 0.0538627 -0.00342755 -0.00477011 -0.0265905 -0.115475 -0.0314836 0 -0.00417857 -0.00289407 -0.00511879 -0.00292992"],
            ["-0.0170496 0.0030745 -0.00254006 0.00268181 -0.0447598 0.118598 -0.00159778 -0.0211813 -0.0332744 -0.1421 -0.179982 -0.0449913 -0.0138126 -0.306409 1.97593 -0.0316317 0.0015114 7.2372e-05 -0.0472093 -0.194109 0 -0.00669541 -0.00361458 -0.0027375 -0.00817669"],
            ["-0.165695 -0.0363216 0.0131448 -0.00489315 -0.0605866 2.15311 -0.111684 -0.0774798 -0.0169155 -0.255984 -0.244584 -0.0695201 0.00149841 -0.034421 -0.0281212 -0.00970254 -0.000989249 -0.00727455 -0.00942917 -0.00711845 0 -0.0144085 -0.00891517 -0.00293885 -0.000768741"],
            ["-0.0263066 -0.0974247 -0.023618 -0.00597071 -0.00991653 -0.0922836 1.73723 -0.193446 -0.015547 0.02822 -0.034449 -0.173782 -0.0305912 -0.00851514 0.00657091 -0.00477303 -0.00127591 -0.00374936 -0.0108258 -0.00373796 0 -0.0261535 -0.00358008 -0.00235644 -0.00371666"],
            ["0.03077 -0.0199777 -0.0737805 -0.0389822 -0.0176551 -0.00763591 -0.0254389 1.36155 -0.0419674 0.0656858 -0.0032189 -0.0382079 -0.106215 -0.0333992 0.000126651 -0.00384756 -6.47949e-05 -0.00407082 -0.00664065 -0.00376108 0 -0.00500773 -0.0216243 -0.00234657 -0.00429433"],
            ["0.0758406 -0.00205562 -0.0250843 -0.12379 -0.0684154 -0.0305808 0.00845006 -0.0773214 1.46467 0.0842631 -0.00326876 -0.0109605 -0.0354131 -0.145173 -0.0465943 -0.0069418 -0.00183821 -0.00156057 -0.0110689 -0.00052847 0 -0.00744164 -0.00392181 -0.0260771 -0.00518357"],
            ["0.185949 -0.028745 0.00721736 -0.0714243 -0.201642 -0.210066 -0.0206209 -0.0848964 -0.0469976 1.81555 -0.010761 -0.00792746 0.000985998 -0.0460296 -0.202154 -0.0109765 -0.00110217 -0.00380194 -0.00424559 -0.00272114 0 -0.0088026 -0.00242021 -0.00607114 -0.0382964"],
            ["1.92752 0.122277 -0.10809 -0.0371345 -0.339352 -0.251127 -0.083313 -0.0111632 -0.0717842 0.0846594 -0.00512554 -0.00933618 -0.00748278 8.0894e-05 -0.0184493 -0.0637893 -0.00566925 -0.0033703 -0.00905319 -0.000347534 0 -0.0699001 0.00191901 0.00961094 -0.0515768"],
            ["0.102425 1.6905 0.0389442 -0.213407 -0.00912554 -0.077178 -0.197166 -0.0694146 -0.0208389 0.00893121 0.000345507 -0.0182018 -0.00617176 -0.00496099 -0.0100779 -0.0153502 -0.0414885 -0.00734189 -0.00697312 -0.00300393 0 -0.119869 -0.0317969 0.0124575 -0.00124064"],
            ["0.042406 0.102944 1.5033 -0.00441375 -0.0735558 -0.0216037 -0.0537746 -0.175326 -0.0710089 0.00187459 -0.00204769 -0.00872714 -0.0103046 -0.00355772 -0.00407068 -0.00794777 -0.00714803 -0.0333638 -0.00882133 -0.00126631 0 -0.0382123 -0.104108 -0.0273952 0.00612878"],
            ["-0.0139254 0.0229062 0.138812 1.2963 0.117764 -0.00933331 -0.0115507 -0.0472659 -0.16392 -0.0682551 -0.00200637 -0.00700835 -0.00379523 -0.00168341 -0.00439197 -0.00768255 -0.00476704 -0.00743789 -0.0317416 -0.00433318 0 -0.0174472 -0.0408097 -0.0933671 -0.0350615"],
            ["-0.17027 -0.0140712 0.0131364 0.0895526 1.63598 -0.0195949 0.00282474 -0.00442651 -0.0590773 -0.18719 0.000525542 -0.00659809 -0.00255743 0.000200812 -0.0106862 -0.00805829 -0.00184906 -0.00460846 -0.00941471 -0.0325482 0 -0.0273852 -0.00959795 -0.0424129 -0.131876"]]

        elif model_name == 'imec':
            values = [["-0.0104603 -0.0011669 -0.00172989 0.16087 0.00711459 -0.0293091 -0.00449294 -0.00060095 -0.00113117"],
            ["-0.000956892 -0.0114393 -0.00205378 -0.0428224 0.179392 0.00857657 -0.000385928 -0.00538833 -0.000962117"],
            ["-0.00127986 -0.000596364 -0.0137547 -0.00149089 -0.0423064 0.191897 0.00138469 -0.000389815 -0.00618386"],
            ["-0.00430976 -0.000731634 -0.00206573 -0.0237278 -0.00406502 -0.00384652 0.216508 0.00459802 -0.0334615"],
            ["-0.00126218 -0.00308923 -0.00124138 -0.000571045 -0.0191549 -0.00339503 -0.0413979 0.185398 0.00447262"],
            ["-0.00117702 -0.00134749 -0.00546335 -0.00174254 -0.00145622 -0.0215481 -0.00149957 -0.0356785 0.215175"],
            ["0.269534 -0.000633232 -0.0377378 -0.00893285 -0.00244059 -0.00347368 -0.0212981 -0.00286588 -0.00303588"],
            ["-0.0308124 0.177643 0.000670678 -0.00207592 -0.00526423 -0.00147391 -0.00219105 -0.0132735 -0.00140742"],
            ["-0.00217547 -0.0210804 0.145958 -0.00257511 -0.00204766 -0.00459222 -0.00126997 -0.00153807 -0.0098308"]]

        values = [[float(x) for x in z[0].split()] for z in values]
        values = np.array(values)

        noiseless_channel = np.zeros((cube.shape[0], cube.shape[1], len(values)))

        for band_num in (range(values.shape[0])):
            vals = values[band_num, :]
            for lam in range(cube.shape[2]):
                noiseless_channel[:, :, band_num] += cube[:, :, lam]*vals[lam]

        return noiseless_channel